name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.9"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run tests
      run: |
        pytest tests/ -v --cov=core --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run linting checks
      run: |
        # 检查代码格式
        black --check --diff .
        
        # 检查导入排序
        isort --check-only --diff .
        
        # 检查代码风格
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # 类型检查
        mypy core/ --ignore-missing-imports



  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: e-websearch:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # 启动容器进行测试
        docker run -d --name test-container -p 8000:8000 e-websearch:test
        
        # 等待服务启动
        echo "等待服务启动..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "服务已启动"
            break
          fi
          sleep 2
        done
        
        # 测试健康检查端点
        curl -f http://localhost:8000/health || exit 1
        
        # 测试搜索端点
        curl -X POST http://localhost:8000/search \
          -H "Content-Type: application/json" \
          -d '{"query": "test", "max_results": 1}' || exit 1
        
        # 清理测试容器
        docker stop test-container
        docker rm test-container



  deploy:
    runs-on: ubuntu-latest
    needs: [build, test-docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "🚀 部署到生产环境"
        echo "镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
        # 这里可以添加实际的部署步骤
        # 例如: kubectl apply, docker-compose up, 等等

  notify:
    runs-on: ubuntu-latest
    needs: [build, test-docker]
    if: always() && github.event_name != 'pull_request'

    steps:
    - name: Notify on success
      if: needs.build.result == 'success' && needs.test-docker.result == 'success'
      run: |
        echo "✅ CI/CD Pipeline 成功完成!"
        echo "镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "标签: ${{ needs.build.outputs.tags }}"
        
        # 可以添加通知到 Slack, Discord 等
        # 例如使用 webhook 发送通知

    - name: Notify on failure
      if: needs.build.result == 'failure' || needs.test-docker.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline 失败!"
        echo "构建结果: ${{ needs.build.result }}"
        echo "测试结果: ${{ needs.test-docker.result }}"
        
        # 可以添加失败通知
